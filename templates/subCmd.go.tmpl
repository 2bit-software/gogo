{{- define "subCmd" }}
    {{- if .SubCommands}}
        {{- range $sub := .SubCommands}}
            // {{$sub.Name}}Cmd represents the {{$sub.Name}} command
            var {{ LowerFirstLetter $sub.Name}}Cmd = &cobra.Command{
            {{- /* TODO: The [flags] help should only show up if function has *any* flags that opted in to be flags */}}
            Use:   "{{$sub.Name}}{{range $flag := $sub.GoFlags}} [{{$flag.Name}}]{{end}} [flags]",
            Short: "{{$sub.Short}}",
            Long: "{{ StripNewlines $sub.Long}}" {{ if $sub.GoFlags}}+
"\nArguments: " +
{{- $len := len $sub.GoFlags }}
{{range $index, $flag := $sub.GoFlags}}  "\n\t{{$flag.Name}}: [{{$flag.Type}}]  {{$flag.Help}}"{{ if lt $index (Subtract $len 1) }} + {{ end }}
{{- end}}{{- end}}{{ if $sub.GoFlags}}{{- end}},
            Run: func(cmd *cobra.Command, args []string) {
                {{- template "runCmd" $sub }}
            },
            }

{{- /* Init SubCommand */}}
            {{- if $sub.GoFlags}}
func init{{ Capitalize $sub.Name}}Flags() {
                {{- range $flag := $sub.GoFlags}}
    {{- if ne $flag.Short 0 }}{{ LowerFirstLetter $sub.Name }}Cmd.Flags().{{ Capitalize $flag.Type}}P("{{$flag.Name}}", "{{ ByteToString $flag.Short}}", {{ QuoteDefault $flag.Default}}, "{{$flag.Help}}")
    {{- else}}
        {{ LowerFirstLetter $sub.Name }}Cmd.Flags().{{ Capitalize $flag.Type}}("{{$flag.Name}}", {{ QuoteDefault $flag.HasDefault $flag.Default}}, "{{$flag.Help}}")
    {{- end}}
    _ = viper.BindPFlag("{{$flag.Name}}", {{ LowerFirstLetter $sub.Name }}Cmd.Flags().Lookup("{{$flag.Name}}"))
    _= viper.BindEnv("{{$flag.Name}}", "{{$sub.Name | ToUpper}}_{{$flag.Name | ToUpper}}")
    {{- if $flag.HasDefault }}
    viper.SetDefault("{{$flag.Name}}", {{ QuoteDefault $flag.HasDefault $flag.Default }})
                {{- end}}
    {{- end}}
}
            {{- end}}
        {{- end}}
    {{- end}}
{{- end }}