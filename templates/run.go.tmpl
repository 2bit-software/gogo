{{- define "runCmd" }}
{{- $sub := . }}
{{- range $index, $flag := $sub.GoFlags}}
        if len(args) > {{$index}} && args[{{$index}}] != "" {
            if args[{{$index}}] == `""` {
                viper.Set("{{$flag.Name}}", "")
            } else {
                viper.Set("{{$flag.Name}}", args[{{$index}}])
            }
        }
    {{- end}}
{{- range $index, $flag := $sub.GoFlags}}
    {{- if eq $flag.Type "string"}}
        arg{{ Capitalize $flag.Name }} := viper.GetString("{{ $flag.Name }}")
        {{- if $flag.AllowedValues }}
            if !slices.Contains([]string{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}"{{$v}}"{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
        {{- if $flag.RestrictedValues }}
            if slices.Contains([]string{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}"{{$v}}"{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
    {{- else if eq $flag.Type "int"}}
        arg{{ Capitalize $flag.Name }} := viper.GetInt("{{ $flag.Name }}")
        {{- if $flag.AllowedValues }}
            if !slices.Contains([]int{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
        {{- if $flag.RestrictedValues }}
            if slices.Contains([]int{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
    {{- else if eq $flag.Type "bool"}}
        arg{{ Capitalize $flag.Name }} := viper.GetBool("{{ $flag.Name }}")
        {{- if $flag.AllowedValues }}
            if !slices.Contains([]bool{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
        {{- if $flag.RestrictedValues }}
            if slices.Contains([]bool{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
            }
        {{- end}}
    {{- else if eq $flag.Type "float64"}}
        arg{{ Capitalize $flag.Name }} := viper.GetFloat64("{{ $flag.Name }}")
        {{- if $flag.AllowedValues }}
            if !slices.Contains([]float64{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}%.2f{{end}}", {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}})
            }
        {{- end}}
        {{- if $flag.RestrictedValues }}
            if slices.Contains([]float64{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
            return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}%.2f{{end}}", {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}})
            }
        {{- end}}
    {{- else}}
        // UNKNOWN TYPE: {{ $flag.Type }} for flag {{ $flag.Name }}
    {{- end}}
{{- end}}
    {{- if $sub.GoFlags }}
    {{- /* Now check if we have all the arguments we need */}}

    ok := detectArgumentRequirements({{ BuildStringArgList $sub.GoFlags }})
    if !ok {
        fmt.Printf("Missing required arguments\n\n")
        _ = cmd.Help()
        os.Exit(1)
    }
    {{ end}}

    {{- if $sub.UseGoGoContext }}
    ctx := gogo.NewContext()
    {{ end}}
    {{- if $sub.ErrorReturn }}
     err := {{- end }} {{- $sub.Name}}({{- if $sub.UseGoGoContext }}ctx, {{- end}}{{- range $index, $flag := $sub.GoFlags}} {{- if ne $index 0}}, {{end}} arg{{ Capitalize $flag.Name }} {{- end}})
     {{- if $sub.ErrorReturn }}
        if err != nil {
            fmt.Printf("Error: %v\n", err)
            os.Exit(1)
        }
    {{- end}}
 {{- end}}