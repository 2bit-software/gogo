{{- define "subCmdUrfave" }}&cli.Command{
	Name:        "{{ .Name }}",
	Usage:       "{{ .Short }}",
	Description: "{{ StripNewlines .Long }}",
	Flags: []cli.Flag{
		{{- range $flag := .GoFlags }}
		&cli.{{ Capitalize $flag.Type }}Flag{
			Name:     "{{ $flag.Name }}",
			{{- if ne $flag.Short 0 }}
			Aliases:  []string{"{{ ByteToString $flag.Short }}"},
			{{- end }}
			Usage:    "{{ $flag.Help }}",
			{{- if $flag.HasDefault }}
			Value:    {{ .Default }},
			{{- end }}
			EnvVars:  []string{"{{ $.Name | ToUpper }}_{{ $flag.Name | ToUpper }}"},
		},
		{{- end }}
	},
	Action: func(c *cli.Context) error {
		{{- template "runCmdUrfave" . }}
	},
}
{{- end }}

{{- define "runCmdUrfave" }}
{{- $sub := . }}
// Get parameters either from CLI args or flags
{{- range $index, $flag := $sub.GoFlags}}
var arg{{ Capitalize $flag.Name }} {{ $flag.Type }}
{{- end}}

// Try positional args first, then flags
{{- if $sub.GoFlags }}
args := c.Args().Slice()
{{- end}}
{{- range $index, $flag := $sub.GoFlags}}
if len(args) > {{$index}} && args[{{$index}}] != "" && args[{{$index}}] != `""` {
	{{- if eq $flag.Type "string" }}
	arg{{ Capitalize $flag.Name }} = args[{{$index}}]
	{{- else if eq $flag.Type "int" }}
	parsedValue, err := stringToInt(args[{{$index}}])
	if err != nil {
		return fmt.Errorf("invalid {{ $flag.Name }} value: %w", err)
	}
	arg{{ Capitalize $flag.Name }} = parsedValue
	{{- else if eq $flag.Type "bool" }}
	var err error
	arg{{ Capitalize $flag.Name }}, err = strconv.ParseBool(args[{{$index}}])
	if err != nil {
		return fmt.Errorf("invalid {{ $flag.Name }} value: %w", err)
	}
	{{- else if eq $flag.Type "float64" }}
	var err error
	arg{{ Capitalize $flag.Name }}, err = strconv.ParseFloat(args[{{$index}}], 64)
	if err != nil {
		return fmt.Errorf("invalid {{ $flag.Name }} value: %w", err)
	}
	{{- else }}
	// UNKNOWN TYPE: {{ $flag.Type }} for flag {{ $flag.Name }}
	{{- end }}
} else {
	arg{{ Capitalize $flag.Name }} = c.{{ Capitalize $flag.Type }}("{{ $flag.Name }}")
}
{{- end}}

{{- if $sub.GoFlags }}
// Validate required params are set
if !detectArgumentRequirements([]string{ {{- range $index, $flag := $sub.GoFlags}}{{if $index}}, {{end}}"{{$flag.Name}}"{{- end}} }, c) {
	return errors.New("missing required arguments")
}
{{- end }}

{{- range $index, $flag := $sub.GoFlags}}
{{- if $flag.AllowedValues }}
{{- if eq $flag.Type "string"}}
if !slices.Contains([]string{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}"{{$v}}"{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "int"}}
if !slices.Contains([]int{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "bool"}}
if !slices.Contains([]bool{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "float64"}}
if !slices.Contains([]float64{ {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' must be one of: {{range $i, $v := $flag.AllowedValues}}{{if $i}}, {{end}}%.2f{{end}}", {{- range $i, $v := $flag.AllowedValues }}{{if $i}}, {{end}}{{$v}}{{- end}})
}
{{- end}}
{{- end}}

{{- if $flag.RestrictedValues }}
{{- if eq $flag.Type "string"}}
if slices.Contains([]string{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}"{{$v}}"{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "int"}}
if slices.Contains([]int{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "bool"}}
if slices.Contains([]bool{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}{{$v}}{{end}}")
}
{{- else if eq $flag.Type "float64"}}
if slices.Contains([]float64{ {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}} }, arg{{ Capitalize $flag.Name }}) {
	return fmt.Errorf("flag '{{ $flag.Name }}' cannot be set to: {{range $i, $v := $flag.RestrictedValues}}{{if $i}}, {{end}}%.2f{{end}}", {{- range $i, $v := $flag.RestrictedValues }}{{if $i}}, {{end}}{{$v}}{{- end}})
}
{{- end}}
{{- end}}
{{- end}}

{{- if $sub.UseGoGoContext }}
ctx := gogo.NewContext()
{{ end}}
{{ if $sub.ErrorReturn }}
err := {{ end }}{{$sub.Name}}({{- if $sub.UseGoGoContext }}ctx, {{- end}}{{- range $index, $flag := $sub.GoFlags}} {{- if ne $index 0}}, {{end}}arg{{ Capitalize $flag.Name }}{{- end}})
{{- if $sub.ErrorReturn }}
if err != nil {
	return fmt.Errorf("error: %w", err)
}
{{- end}}
return nil
{{- end}}

{{- define "stringToIntFunc" }}
// stringToInt converts a string to an integer, handling errors
func stringToInt(s string) (int, error) {
	var result int
	_, err := fmt.Sscanf(s, "%d", &result)
	if err != nil {
		return 0, err
	}
	return result, nil
}
{{- end }}