//go:build gogo

/*
This file is generated by GoGo. Do not edit.
.............................................@%=====@@..............................................
..........................................@============#@...........................................
........................................@======*====%=====@.........................................
......................................@=======@======+======@.......................................
.....................................-========%-=====@=======@......................................
.....................................@=======@========@======#......................................
.....................................+=====%*==========@======+.....................................
....................................@=======+%@@@@@@%*========@.....................................
....................................+=#@%-:::::::::::::::*@@===:....................................
...................................@+:::::::::::::::::::::::::@@....................................
..................................-:::::::::-+*#####+-::::::::::#...................................
..................................@%@@*====================#@@*:+...................................
................................@================================%=.................................
...............................%===================================@................................
................@@...........@======================================*:..............................
................=@@@@@%-....@#@@@@@@%**********@----%******+*#%@@@#+==-.........%@@.................
.................@@@@@@@@@@@@@@@@@-@********@@*=----@*#+*******@-@@@@@@@@@@@@@@@@@@.................
.................%%@@@@@@@@@@@@@@@--@*********@-----+#*********@-@@@@@@@@@@@@@@@@@..................
.................@@@@@@@@@@*=@@@@@---*@+#*+%@-%-------@*****#*@--@@@@%=%@@@@@@@@@@@.................
..................@@@@@@@@-----@@%-----------%-------@---+#+-----*@@-----@@@@@@@@@:.................
..................-@@@@@@@--@---%+--------@#-@---------@----------#--+%--@@@@@@@@@..................
....................@@@@@@--@*+-#----==------%-----------#@#------@-#=@--@@@@@@@*...................
....................=@@@@@*-@-@-@-----------*---------------------@-#-@-@@@@@@*.....................
.....................:@@@@@-%--%@-----------@---------------------@@-*+-@@@@@@@.....................
........................@@@@---%@-----------@---------------------@@---@@@@@@.......................
............................@---@-----------@---------------------@---@@@@..........................
..............................%@@-----------@---------------------@@#...............................
................................@-----------@---------------------@.................................
................................+-----------@---------------------@.................................
.................................-----------@---------%-----------#.................................
.................................#-----------@-------#-------------.................................
.................................@-----------+*------@-----------*..................................
.................................@-------------@*-=@*------------@..................................
..................................-------------------------------@..................................
..................................@------------------------------=..................................
.................................@@------@---------------@=-----%...................................
...............................#===@----@#@=------------@@@-----@=@.................................
.............................@@====@----%----=%@@@@@@#---------#===%................................
..........................@+=@======@--------------------------@====*#@:............................
........@:.....#*....+@@@===@======#:+--------=@#+#@+---------@*=====#===@...........+%%*...........
....#@=@........%-====%+====%======@.@-----------------------+:@======@====@+%@%*=%.......:+........
...@===@%.....=@=====@=====@=======+..@----------------------#.-=======@====@=====@........+==#*....
.**=*@=============+@======#======%....@--------------------@...@======#=====#+=====@@%%@@@+==-%*...
%=======+@@@@@@@%==+*=============@.....@------------------#....@=======@=====@@@==========+@@===%:.
===================@==============@......@---------------%:.....@==============@=====***==========-@
===================*==============@.......%%------------@.......@==============*====================
==================@===============@........*----------+@........@===============@===================
==================@=================........*----------@........@===============@===================
==================@================@........@----------@........#===============@===================
==================@================*:.......@@-------#@........@================%===================
===++==+==========%@@@@@@@@@@@======@......@.@#%@@@%%..@......@#================#=============*=====
===@==%=====================@========@....@..-%#####@...@...:@@======@==*%%%%#+=-==========#===@====
===@=-@===================@===========@%.::...@#####@....#.@.@=========@====================@==%====
===+=@=================+@=-============@.@.....@%###@....#..@==========-=@===================@==#===
==*==@==============+@+-================#+....@######@.....@===============+@+===============@==@===
*/

package main

import (
	"errors"
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

func main() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)
	// root command flags
	// TODO: this should be opt-in based on configuration during building
	rootCmd.PersistentFlags().StringP("config", "c", "", "config file (default is ./config.yaml)")
	_ = viper.BindPFlag("config", rootCmd.PersistentFlags().Lookup("config"))
	rootCmd.PersistentFlags().BoolP("verbose", "v", false, "enable verbose mode")
	_ = viper.BindPFlag("verbose", rootCmd.PersistentFlags().Lookup("verbose"))
	rootCmd.Flags().StringP("config", "c", "", "config file (default is ./config.yaml)")
	rootCmd.Flags().BoolP("verbose", "v", false, "enable verbose mode")
	// attach subcommands
	rootCmd.AddCommand(subCommandACmd)

	// init the subcommands
	initSubCommandAFlags()

}

func initConfig() {
	configFile := rootCmd.PersistentFlags().Lookup("config").Value.String()

	if configFile != "" {
		viper.SetConfigFile(configFile)
	} else {
		viper.SetConfigName("config")
		viper.SetConfigType("yaml")
		viper.AddConfigPath(".")
	}

	viper.AutomaticEnv()

	if err := viper.ReadInConfig(); err != nil {
		var configFileNotFoundError viper.ConfigFileNotFoundError
		if !errors.As(err, &configFileNotFoundError) {
			fmt.Printf("Error reading config file: %s", err)
			os.Exit(1)
		}
	}
}

func toPtr[T any](v T) *T {
	return &v
}

var rootCmd = &cobra.Command{
	Use:   "PrintHello",
	Short: "A short description",
	Long:  "A much longer description. Much wow!",
	Run: func(cmd *cobra.Command, args []string) {
		if args[0] != "" {
			// if verbose is set, log what we're doing
			if viper.GetBool("verbose") {
				fmt.Printf("Setting config to: %v\n", args[0])
			}
			viper.Set("config", args[0])
		}
		if args[1] != "" {
			// if verbose is set, log what we're doing
			if viper.GetBool("verbose") {
				fmt.Printf("Setting verbose to: %v\n", args[1])
			}
			viper.Set("verbose", args[1])
		}
		argConfig := viper.GetString("config")
		argVerbose := viper.GetBool("verbose")
		PrintHello(argConfig, argVerbose)
	},
}

// SubCommandACmd represents the SubCommandA command
var subCommandACmd = &cobra.Command{
	Use:   "SubCommandA [print] [shout] [flags]",
	Short: "A short description for SubCmdA",
	Long: "A much longer description for SubCmdA. Much wow!" +
		"Arguments:" +
		"print    Print extra information on the result." + "shout    Words to shout.",
	Run: func(cmd *cobra.Command, args []string) {
		if args[0] != "" {
			// if verbose is set, log what we're doing
			if viper.GetBool("verbose") {
				fmt.Printf("Setting print to: %v\n", args[0])
			}
			viper.Set("print", args[0])
		}
		if args[1] != "" {
			// if verbose is set, log what we're doing
			if viper.GetBool("verbose") {
				fmt.Printf("Setting shout to: %v\n", args[1])
			}
			viper.Set("shout", args[1])
		}
		argPrint := viper.GetBool("print")
		argShout := viper.GetString("shout")
		SubCommandA(argPrint, argShout)
	},
}

func initSubCommandAFlags() {
	subCommandACmd.Flags().BoolP("print", "p", false, "Print extra information on the result.")
	_ = viper.BindPFlag("print", subCommandACmd.Flags().Lookup("print"))
	_ = viper.BindEnv("print", "SUBCOMMANDA_PRINT")
	subCommandACmd.Flags().String("shout", "", "Words to shout.")
	_ = viper.BindPFlag("shout", subCommandACmd.Flags().Lookup("shout"))
	_ = viper.BindEnv("shout", "SUBCOMMANDA_SHOUT")
}

